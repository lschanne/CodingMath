A bitmap is a rectangular grid a values used to set pixel colors on the screen.
Each pixel would typically have an (x,y) coordinate where you can call
getPixel(x,y) and setPixel(x,y,alpha) to obtain or change the color of a pixel.

Unfortunately, the canvas in HTML5 doesn't have a simple getPixel function.
Instead, you have to call context.getImageData(...), which returns an
ImageData object that has attributes width, height, and data - an array of
pixel values.

The ImageData you get from context is a fixed snapshot at the time you called
the getter. If you change the canvas at all, that ImageData is no longer valid.

The data attribute works as follows:
data[0] is the red value of pixel (0,0).
data[1] is the green value of pixel (0,0).
data[2] is the blue value of pixel (0,0).
data[3] is the alpha value of pixel (0,0).
data[4] is the red value of pixel (0,1) (or pixel(1,0) if there is only one column).
...
Each data[i] is between [0, 225], inclusive.

So you have to do a bit of math to get the values of any particular pixel,
except for the first.
index = ((width * y) + x) * 4, to get the red value of pixel (x, y).

Now when we call context.getImageData(...), we pass in (x, y, w, h) to get the
image data from a subrectangle on the canvas. Now the getImageData is somewhat
expensive, so only grab what you need.

You can of course call getImageData(x, y, 1, 1) to get only a single pixel
at (x, y).

And of course you can use the alpha value of any pixel to do hit detection.

We used these concepts then to do some hit detection on a shape that starts as
a circle but quickly becomes quite irregular.

